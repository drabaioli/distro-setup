"=================
" General Settings
"=================

" copy/paste settings
set nocp
set pastetoggle=<f5>

" tab navigation
noremap <A-left>    :tabp<CR>
noremap <A-right>   :tabn<CR>
noremap <A-S-left>  :tabmove -1<CR>
noremap <A-S-right> :tabmove +1<CR>
nnoremap <C-S-t>    :tabnew<CR>
inoremap <C-S-t>    <Esc>:tabnew<CR>

" indentation
set tabstop=2 shiftwidth=2 expandtab
filetype plugin indent on

" reopen last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


"===========
" Statusline
"===========

set laststatus=2  " Always show statusline
set noshowmode    " Hide the default mode text (e.g. -- INSERT -- below the statusline)
set t_Co=256
set showcmd

set background=dark

" Git Branch
let s:git_branch = ''
function! SetStatuslineGit()
  let l:filepath = expand('%:p:h')  " Get the full path of the file's directory
  let l:cmd = 'cd ' . shellescape(l:filepath) . ' && git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d ''\n'''
  silent let s:git_branch = system(l:cmd)
  let s:git_branch = strlen(s:git_branch) > 0?'  '.s:git_branch.' ':' '
endfunction

function! GetStatuslineGit()
  if mode() == 't' " Don't return git branch if in terminal mode
    return ''
  endif
  return s:git_branch
endfunction

" Recompute the git branch every time buffers are switched
autocmd BufEnter * :call SetStatuslineGit()

let g:currentmode={
       \ 'n'      : 'NORMAL ',
       \ 'v'      : 'VISUAL ',
       \ 'V'      : 'V·LINE ',
       \ "\<C-V>" : 'V·BLOCK ',
       \ 'i'      : 'INSERT ',
       \ 'R'      : 'REPLACE ',
       \ 'Rv'     : 'V·REPLACE ',
       \ 'c'      : 'COMMAND ',
       \ 't'      : 'TERMINAL ',
       \}

set statusline=
set statusline+=%1*
set statusline+=\ \\ %{g:currentmode[mode()]}                      " Mode
set statusline+=%2*
set statusline+=
set statusline+=%3*
set statusline+=%{GetStatuslineGit()}                               " Git Branch
set statusline+=%4*
set statusline+=
set statusline+=%#ModeMsg#
set statusline+=\ %t\                                                " Filename
set statusline+=%5*
set statusline+=%{&modified?\"\ \":\"\"}                            " Modified
set statusline+=%{&readonly?\"\ \":\"\"}                            " Readonly
set statusline+=%#ModeMsg#
set statusline+=
set statusline+=%=                                                  " Move to the right
set statusline+=
set statusline+=\ %y\                                               " Filetype
set statusline+=%4*
set statusline+=
set statusline+=%3*
set statusline+=\ %p%%\                                             " Position percentage
set statusline+=%2*
set statusline+=
set statusline+=%1*
set statusline+=\ %{strftime('%H:%M')}\                             " Print time

hi User1 cterm=reverse,bold
hi User2 cterm=bold ctermbg=23
hi User3 cterm=bold ctermbg=23
hi User4 cterm=bold ctermfg=23
hi User5 cterm=bold ctermfg=1

hi TabLine        cterm=none ctermbg=0 ctermfg=none
hi TabLineSel     cterm=reverse,bold
hi TabLineFill    cterm=bold


"======
" Netrw
"======

" Open Netrw in a new tab with F2
map <F2> :tabnew \|Explore<CR>
let g:netrw_keepdir = 0
let g:netrw_banner = 0
let g:netrw_localcopydircmd = 'cp -r'

function! NetrwMapping()
  " Create a new file
  nmap <buffer> cf %:w<CR>:buffer #<CR>
  " Create a new directory
  nmap <buffer> cd d
  " Move/rename file
  nmap <buffer> m R

  " Mark a file
  nmap <buffer> <TAB> mf
  " Unmark everything
  nmap <buffer> <S-TAB> mu
  " Copy marked files in directory under cursor
  nmap <buffer> fc mtmc
  " Move marked files in directory under cursor
  nmap <buffer> fm mtmm
  " Shell command on marked files
  nmap <buffer> fs mx
endfunction

" Load mappings when entering Netrw
augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END


"=========
" Terminal
"=========

" Open terminal on bottom split with F3
map <F3> :botright terminal<CR>
" Go to Terminal-Normal mode by pressing Esc twice
" (Press 'i' to go back to terminal mode)
tnoremap <Esc><Esc> <C-\><C-n>

" Style statusline like other modes
hi StatusLineTerm   ctermfg=none ctermbg=none cterm=reverse,bold
hi StatusLineTermNC ctermfg=none ctermbg=none cterm=reverse
